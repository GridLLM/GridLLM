name: Integration Tests

on:
    push:
        branches: [main, staging]
    pull_request:
        branches: [main, staging]

jobs:
    integration-test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Create .env file for testing
              run: |
                  cat > .env << EOF
                  NODE_ENV=test
                  SERVER_PORT=4000
                  CLIENT_PORT=3000
                  REDIS_PORT=6379
                  REDIS_PASSWORD=
                  REDIS_DB=0
                  REDIS_KEY_PREFIX=GridLLM:
                  WORKER_ID=worker-ci-001
                  OLLAMA_HOST=host.docker.internal
                  OLLAMA_PORT=11434
                  OLLAMA_PROTOCOL=http
                  API_KEY=test-api-key
                  LOG_LEVEL=info
                  EOF

            - name: Build Docker images
              run: |
                  docker compose build --no-cache

            - name: Start services
              run: |
                  npm run bundle:full

            - name: Wait for services to be healthy
              run: |
                  echo "Waiting for services to start..."
                  sleep 30

                  # Wait for Redis to be healthy
                  timeout 60 bash -c 'until docker compose exec -T redis redis-cli ping; do sleep 2; done'
                  echo "Redis is healthy"

                  # Wait for Server to be healthy
                  timeout 120 bash -c 'until curl -f http://localhost:4000/health; do sleep 5; done'
                  echo "Server is healthy"

                  # Wait for Client to be healthy
                  timeout 120 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
                  echo "Client is healthy"

            - name: Run basic integration tests
              run: |
                  echo "Testing server health endpoint..."
                  curl -f http://localhost:4000/health

                  echo "Testing client health endpoint..."
                  curl -f http://localhost:3000/health

                  echo "Testing Redis connection..."
                  docker compose exec -T redis redis-cli ping

                  echo "All services are running and healthy!"

            - name: Show service logs on failure
              if: failure()
              run: |
                  echo "=== Server logs ==="
                  docker compose logs server
                  echo "=== Client logs ==="
                  docker compose logs client
                  echo "=== Redis logs ==="
                  docker compose logs redis

            - name: Stop and cleanup
              if: always()
              run: |
                  docker compose down -v
                  docker system prune -f
