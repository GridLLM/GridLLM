{
	"name": "gridllm",
	"version": "1.0.0",
	"description": "GridLLM - Distributed LLM Processing System",
	"scripts": {
		"install:server": "cd server && npm install",
		"install:client": "cd client && npm install",
		"install:all": "npm run install:server && npm run install:client",
		"build:server": "cd server && npm run build",
		"build:client": "cd client && npm run build",
		"build:all": "npm run build:server && npm run build:client",
		"start:server": "cd server && npm run start",
		"start:client": "cd client && npm run start",
		"dev:server": "cd server && npm run dev",
		"dev:client": "cd client && npm run dev",
		"docker:build:server": "cd server && docker build -t gridllm-server .",
		"docker:build:client": "cd client && docker build -t ${CLIENT_IMAGE_NAME:-gridllm-client} .",
		"docker:build": "npm run docker:build:server && npm run docker:build:client",
		"client": "npm run docker:build:client && docker stop ${CLIENT_CONTAINER_NAME:-gridllm-client-container} 2>/dev/null || true && docker rm ${CLIENT_CONTAINER_NAME:-gridllm-client-container} 2>/dev/null || true && docker run -d -p ${CLIENT_PORT:-3001}:3000 --name ${CLIENT_CONTAINER_NAME:-gridllm-client-container} --env-file .env -e PORT=3000 -e SERVER_HOST=${SERVER_HOST:-host.docker.internal} -e SERVER_REDIS_HOST=${REDIS_HOST:-host.docker.internal} -e SERVER_REDIS_PORT=${REDIS_PORT:-6389} ${CLIENT_IMAGE_NAME:-gridllm-client}",
		"docker:run": "npm run docker:build && npm run docker:run:server && npm run docker:run:client",
		"docker:stop": "docker stop gridllm-server-container gridllm-client-container 2>/dev/null || true",
		"docker:clean": "npm run docker:stop && docker rm gridllm-server-container gridllm-client-container 2>/dev/null || true && docker rmi gridllm-server gridllm-client 2>/dev/null || true",
		"docker:logs:server": "docker logs -f gridllm-server-container",
		"docker:logs:client": "docker logs -f gridllm-client-container",
		"docker:logs": "echo '=== Server Logs ===' && docker logs gridllm-server-container 2>/dev/null || echo 'Server not running' && echo '=== Client Logs ===' && docker logs gridllm-client-container 2>/dev/null || echo 'Client not running'",
		"docker:status": "echo '=== Container Status ===' && docker ps --filter 'name=gridllm' --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}' && echo '=== Health Checks ===' && curl -s http://localhost:4000/health || echo 'Server not responding' && curl -s http://localhost:3000/health || echo 'Client not responding'",
		"compose:up": "docker compose up -d",
		"compose:down": "docker compose down",
		"compose:build": "docker compose build",
		"compose:logs": "docker compose logs -f",
		"compose:status": "docker compose ps",
		"compose:clean": "docker compose down -v --remove-orphans && docker compose rm -f",
		"bundle": "echo 'Starting GridLLM bundle (Server + Redis)...' && docker compose up -d redis server",
		"bundle:full": "echo 'Starting GridLLM full bundle (Server + Redis + Client)...' && docker compose up -d",
		"make:bundle-with-client": "echo 'Starting GridLLM full bundle (Server + Redis + Client)...' && docker compose up -d",
		"bundle:stop": "docker compose down",
		"bundle:logs": "docker compose logs -f",
		"logs:server:docker": "docker logs -f gridllm-server-container 2>/dev/null || echo 'Server container not running'",
		"logs:client:docker": "docker logs -f gridllm-client-container 2>/dev/null || echo 'Client container not running'",
		"logs:server:native": "tail -f server/logs/GridLLM-server.log 2>/dev/null || echo 'No native server logs found'",
		"logs:client:native": "tail -f client/logs/GridLLM-client.log 2>/dev/null || echo 'No native client logs found'",
		"clean": "rm -rf server/dist client/dist dist && rm -rf server/logs/* client/logs/* logs/* 2>/dev/null || true",
		"format": "prettier --write .",
		"setup": "npm run install:all && echo 'Setup complete - configure .env files as needed'",
		"status": "echo '=== GridLLM Network Status ===' && curl -s http://localhost:4000/health | jq '.' 2>/dev/null || echo 'Server not responding' && curl -s http://localhost:3000/health | jq '.' 2>/dev/null || echo 'Client not responding'",
		"test": "jest",
		"test:integration": "jest tests/integration.test.ts",
		"test:unit": "jest tests/client && jest tests/server",
		"test:e2e": "scripts/run-e2e-tests.sh",
		"test:watch": "jest --watch",
		"test:coverage": "jest --coverage"
	},
	"keywords": [
		"llm",
		"distributed",
		"ollama",
		"redis"
	],
	"author": "GridLLM Team",
	"license": "MIT",
	"dependencies": {
		"jest": "^29.7.0"
	},
	"devDependencies": {
		"@testcontainers/redis": "^11.4.0",
		"@types/jest": "^30.0.0",
		"@types/node": "^24.1.0",
		"testcontainers": "^11.4.0",
		"ts-jest": "^29.4.0",
		"typescript": "^5.8.3"
	}
}
